COMPILER CueFile
(*
  Template for creating new parsers
  
  *)

DELPHI
  PRIVATE
    fOutputStream : TMemoryStream;
    fSubSelectDepth : integer;
    fInNaturalJoin : boolean;
            
    procedure Init;
    procedure Final;
                
    property OutputStream : TMemoryStream read fOutputStream write fOutputStream;
    CREATE 
    fOutputStream := TMemoryStream.Create;
  DESTROY                     
    fOutputStream.Free;
  ERRORS
 
END_DELPHI

(* Arbitrary Code *)

 type Track = record
       performer: string;
       title: string;
       timeoffset: string;
       timeoffset_seconds: integer;
end;

type CueFileData = record
     performer: string;
     title: string;
     format: string;
     source: string;
     tracks: array of Track;
     trackcnt: integer;
    end;
   
var
   current_cue_file: CUEFileData;
    
 timeoffset_temp: string;    
    
const
  PadLen = 20;
                        
function PadR(S : string; Ch : char; L : integer) : string;
var
  i : integer;
begin
  for i := 1 to L - (Length(s)) do
    s := s + Ch;
  Result := s;
end;

procedure T-->Grammar<--.Init;
begin
  OutputStream.Clear;

 end;

procedure T-->Grammar<--.Final;
begin
   OutputStream.Position := 0;
  OutputStream.SaveToStream(ListStream);
  OutputStream.Clear;
end;
                                 
function parse_string(zstr: string): string;
var t:    integer;
var temp: string;
var len:  integer;
begin;
result:='';
  len := 0;
temp:='';
  //writeln ('Parsing string: ',zstr);
  t   := pos('"', zstr) + 1;
  len := length(zstr);
  while (zstr[t] <> '"') do
  begin;
    //writeln (zstr[t]);
    if (zstr[t] = '\') and (zstr[t + 1] = '"') then
    begin;
      temp := temp + '"';
      Inc(t, 1);
    end else
    if (zstr[t] = '\') and (zstr[t + 1] = '\') then
    begin;
      temp := temp + '\';
      Inc(t, 1);
    end else
    if (zstr[t] = '\') and (zstr[t + 1] = 't') then
    begin;
      temp := temp + #9;
      Inc(t, 1);
    end else
    if (zstr[t] = '\') and (zstr[t + 1] = 'n') then
    begin;
      temp := temp + #13#10;
      Inc(t, 1);
    end else

      temp := temp + zstr[t];

    Inc(t);
  end;
  Result := temp;
end;



(* End of Arbitrary Code *)

IGNORE CASE

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  lf       = CHR(10) .
  eol      = CHR(13) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - "'" .
  strings  = CHR(32) .. CHR(255) - '"'.
  macros   = ANY - eol .

COMMENTS FROM "/*" TO "*/"

IGNORE
  tab + eol + lf

TOKENS
  identifier = ( "_" | letter) { "_" | letter | digit } .
  number     = digit { digit } [ "." { digit }] [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  _string     = '"' { strings } '"' .
  char       = "'" [ "\" ] chars "'" .
  library    = "<" files { files } ">" .

IGNORE CHR(1)..CHR(32)

PRODUCTIONS



Title = "TITLE" _string   (.  current_cue_file.tracks[current_cue_file.trackcnt].title := parse_string(lexstring);.).

Performer = 
"PERFORMER" _string (.  current_cue_file.tracks[current_cue_file.trackcnt].performer := parse_string(lexstring); .).

ArtistInfo = (Title | Performer).

Index = 
"INDEX" number number (. timeoffset_temp := lexstring; .) ":" number (. timeoffset_temp := timeoffset_temp+':'+lexstring; .) ":" number (.writeln('Index '+timeoffset_temp); .).

TrackEntry = 
   (. setlength(current_cue_file.tracks, current_cue_file.trackcnt+1); .)
"TRACK" number identifier
ArtistInfo {ArtistInfo}
["FLAGS" identifier]

Index {Index} (.   
// Here the last index that we received is the actual track index (hopefully 01) since 00 is a pre-gap and we don't care about those
  current_cue_file.tracks[current_cue_file.trackcnt].timeoffset := timeoffset_temp;
  current_cue_file.tracks[current_cue_file.trackcnt].timeoffset_seconds := TrackLengthFromStringToSecs(timeoffset_temp);
  inc(current_cue_file.trackcnt); .).

CueData = 
(.  current_cue_file.trackcnt := 0;  .) 
"PERFORMER" _string (. current_cue_file.performer := parse_string(lexstring); .) 
"TITLE" _string     (. current_cue_file.title := parse_string(lexstring); .)
"FILE" _string (.  current_cue_file.Source := parse_string(lexstring); .) identifier  (. current_cue_file.format := lexstring;.)
TrackEntry {TrackEntry}.
       

CueFile  = 

CueData

.
                                                               
END CueFile.
