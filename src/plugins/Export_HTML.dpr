library Export_HTML;

{

This is a plugin generated by the PluginHelper
application. It serves as a starting point for developing plugins
for FMF Dialogue Tool.

Plugin Name: HTML Exporter
Author: Dj Unique

Description:

This plugin will export the dialogue into a html file.

It uses a template to do the dirty work so it can be easily customized.
It also uses a CSS stylesheet for even better customization.

}

uses
  Classes, VCL.Dialogs, pluginfunc in 'pluginfunc.pas', SysUtils;

{$R *.res}

var dlg:     pdialogue;
var dastr:   pchar;
var Data:    shortstring;
var savedlg: TSaveDialog;


  function GetInterfaceVersion: shortstring; stdcall;
  begin;
    Result := interface_version;
  end;
  procedure PluginClose; stdcall;
  begin;
  end;

  function GetPluginName: ShortString; stdcall;
  begin;
    Result := 'Dialogue -> HTML';
  end;
  function GetPluginDescription: ShortString; stdcall;
  begin;
    Result := 'FMFDLGTool HTML Export plugin';
  end;
  function CanAddToMenu: boolean; stdcall;
  begin;
    Result := True;
  end;
  procedure RunPlugin(basepath: shortstring); stdcall;
  var i, j:         integer;
  var htmltemplate: TStrings;
  var csstemplate:  TStrings;
  var nodeindex, editorfile, notes, nodes: string;
  begin;
    GetCurrentDlgName(dastr);

(*

 Node index:<br>
  <br>
  <table class="thetable" width="67%"  border="0" cellspacing="1" cellpadding="4">
    <tr bgcolor="#E5E5E5">
      <td width="18%">Node # </td>
      <td width="36%">Node name</td>
      <td width="46%">Notes</td>
    </tr>
    <tr bgcolor="#F0F0F0">
      <td>%s</td>
      <td>%s</td>
      <td>%s</td>
    </tr>
  </table>


*)

    savedlg            := TSaveDialog.Create(NIL);
    savedlg.initialdir := basepath + '\html';
    savedlg.Options    := [ofNoChangeDir];
    savedlg.Filter     := 'HTML Files (*.htm,*.html)|*.htm;*.html';
    savedlg.DefaultExt := 'htm';
    nodeindex          := '';
    if savedlg.Execute then
    begin;

      nodeindex := 'Node index:<br> <br> <table style="border-collapse: collapse;" class="thetable" width="67%"  border="1" cellspacing="1" cellpadding="4"> <tr bgcolor="#E5E5E5"> <td width="18%">Node # </td><td width="36%">Node name</td><td width="46%">NPC Line</td></tr>';

      dlg          := GetDLG;
      htmltemplate := TStringList.Create;
      //csstemplate := TStringlist.Create;
      //csstemplate.LoadFromFile(basepath+'\plugins\dlgdump.css');
      htmltemplate.LoadFromFile(basepath + '\plugins\dump_template.htm');
      nodes        := '';
      for i := 0 to dlg.nodecount - 1 do
      begin;
        nodeindex := nodeindex + '    <tr bgcolor="#F0F0F0"><td valign="top">' + IntToStr(i + 1) +
          '</td><td valign="top"><a href=' + extractfilename(savedlg.filename) + '#' + dlg.nodes[i].nodename +
          '>' + dlg.nodes[i].nodename + '</a></td><td valign="top"><i>' + dlg.nodes[i].npctext + '</i></td></tr>';
        nodes     := nodes + '<p class="block">';
        notes     := dlg.nodes[i].notes;
        if notes = '' then notes := 'None.';
        nodes     := nodes + format('<a name="' + dlg.nodes[i].nodename +
          '"><b>Node %0.3d</b></a> (%s) <br><br><b>Notes:<br></b><i>%s</i><br><br><b>NPC:</b> %s<br><br>',
          [i, dlg.nodes[i].nodename, notes, dlg.nodes[i].npctext]);
        if dlg.nodes[i].optioncnt > 0 then
        begin;
          nodes := nodes + '<b>Player options:</b><br><br>';
        end else
          nodes := nodes + '<B> Dialogue terminates here. </B>';

        for j := 0 to dlg.nodes[i].optioncnt - 1 do
        begin;

          if dlg.nodes[i].options[j].notes <> '' then
            nodes := nodes + '<br> <b>Note: </b><i>' + dlg.nodes[i].options[j].notes + '</i><br>';

          nodes := nodes + '<span class="playeroption">' + dlg.nodes[i].options[j].optiontext + ' -> ';

          if dlg.nodes[i].options[j].noderesolved <> -1 then
            nodes := nodes + '<a onMouseOver="window.status=''Go to node ' + dlg.nodes[i].options[j].nodelink +
              '''; return true;" onMouseOut="window.status=''''; return true;" href="' + extractfilename(
              savedlg.filename) + '#' + dlg.nodes[i].options[j].nodelink + '">' + dlg.nodes[i].options[j].nodelink + '</a>'
          else
            nodes := nodes + dlg.nodes[i].options[j].nodelink;
          nodes := nodes + '</span><br>';

        end;
        nodes := nodes + '<br>';
        nodes := nodes + '</p>';
      end;
      htmltemplate.Text := StringReplace(htmltemplate.Text, '%%DialogueNodes%%', nodes, [rfReplaceAll]);
      nodeindex := nodeindex + '</table>';
      //MessageDlg('That''s that then. Eh.?', mtInformation, [mbOK], 0);
      htmltemplate.Text := StringReplace(htmltemplate.Text, '%%cssfilename%%', extractfilename(
        changefileext(savedlg.filename, '.css')), [rfReplaceAll]);
      htmltemplate.Text := StringReplace(htmltemplate.Text, '%%dlgfilename%%', dlg.filename, [rfReplaceAll]);
      htmltemplate.Text := StringReplace(htmltemplate.Text, '%%version%%', GetProgramVer, [rfReplaceAll]);

      htmltemplate.Text := StringReplace(htmltemplate.Text, '%%NodeIndex%%', nodeindex, [rfReplaceAll]);
      htmltemplate.Text := StringReplace(htmltemplate.Text, '<br>', '<br>' + #13#10, [rfReplaceAll]);

      //csstemplate.SaveToFile(changefileext(savedlg.filename,'.css'));
      htmltemplate.SaveToFile(savedlg.filename);

    end;


    //showmessage('Nodes: '+inttostr(dlg.nodecount));
    //showmessage('First node = '+dlg.nodes[0].nodename);
    savedlg.Free;

  end;

exports
  GetPluginName,
  PluginClose,
  GetInterfaceVersion,
  GetPluginDescription,
  CanAddToMenu,
  RunPlugin;

begin

end.

