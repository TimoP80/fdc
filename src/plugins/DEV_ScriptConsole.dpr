library DEV_ScriptConsole;

{ 

This is a plugin generated by the PluginHelper 
application. It serves as a starting point for developing plugins
for FMF Dialogue Tool.

Plugin Name: Script Console
Author: DjUnique

Description:

This is a debug utility that allows the user to enter DWScript commands to perform various tasks.

}

uses
  Classes, VCL.Styles, VCL.Themes, consconf in 'consconf.pas', Dialogs, Forms, Graphics, Inifiles, pluginfunc,
  scriptconswnd in 'scriptconswnd.pas', SysUtils;

{$R *.res}
{$R VCLStyles.res}

  function GetPluginName: ShortString; stdcall;
  begin;
    Result := 'Debugging Console';
  end;

  function GetInterfaceVersion: shortstring; stdcall;
  begin;
    Result := interface_version;
  end;

  procedure PluginClose; stdcall;
  begin;
    form1.Free;
    //unsetoutputcontrol;
    //form1.free;

  end;

  procedure LoadConfig(basepath: string);
  var color1, color2: string;
  var font:           string;
  begin;
    if fileexists(basepath + '\plugins\scriptconsole.cfg') then
    begin;
      senddebugmsg('Loading color & font config.');
      cfg    := TInifile.Create(basepath + '\plugins\scriptconsole.cfg');
      font   := cfg.readString('Color configuration', 'Font', '');
      color1 := cfg.readString('Color configuration', 'Color1', '');
      color2 := cfg.readString('Color configuration', 'Color2', '');

      form1.Memo1.font.Name := font;
      form1.Memo2.font.Name := font;

      form1.edit1.font.Name := font;

      form1.Memo1.Color      := stringtocolor(color1);
      form1.Edit1.Color      := stringtocolor(color1);
      form1.Memo2.Color      := stringtocolor(color1);
      form1.memo1.Font.Color := stringtocolor(color2);
      form1.memo2.Font.Color := stringtocolor(color2);
      form1.edit1.Font.Color := stringtocolor(color2);

    end;

  end;

  procedure PluginConfig(basepath: shortstring); stdcall;
  begin;
  TStyleManager.TrySetStyle(GetStyle);
    Form1 := TForm1.Create(application);
    form2 := TForm2.Create(form1);
    LoadConfig(basepath);
    form2.JvFontComboBox1.fontname := form1.Memo1.font.Name;
    form2.ColorBox1.selected := form1.Memo1.Color;
    form2.ColorBox2.selected := form1.memo1.font.Color;

    form2.ShowModal;


      form2.Free;
     form1.Free;
  TStyleManager.TrySetStyle(TStyleManager.SystemStyle.Name);
  end;
  function GetPluginDescription: ShortString; stdcall;
  begin;
    Result :=
      'This plugin is a debugging tool and more. It can do pretty much anything the tool does normally by sending scripting commands to the EXE.';
  end;
  function GetKeyShortCut: shortstring; stdcall;
  begin;
    Result := 'Ctrl+D';
  end;

  function CanAddToMenu: boolean; stdcall;
  begin;
    Result := True;
  end;
  procedure RunPlugin(basepath: shortstring); stdcall;
  var color1, color2: string;
  var font:           string;
  begin;
  TStyleManager.TrySetStyle(GetStyle);

    Form1 := TForm1.Create(application);
    form2 := TForm2.Create(Form1);

    LoadConfig(basepath);
    cmdhistsize := 0;

    setoutputcontrol(form1.memo1);

    form1.Show;
    while form1.Visible = True do
    begin;
      Application.ProcessMessages;
    end;
    unsetoutputcontrol;
  TStyleManager.TrySetStyle(TStyleManager.SystemStyle.Name);
    //  form1.Free;
  end;

exports
  GetKeyShortCut,
  GetInterfaceVersion,
  GetPluginName, PluginConfig,
  GetPluginDescription,
  CanAddToMenu,
   PluginClose,
  RunPlugin;

begin

end.

