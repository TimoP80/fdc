library Export_TXT;

{

This is a plugin generated by the PluginHelper
application. It serves as a starting point for developing plugins
for FMF Dialogue Tool.

Plugin Name: TXT Exporter
Author: Dj Unique

Description:

This plugin exports the dialogue as a simple text outline with:

-NPC text
-player options and target nodes


}

uses
  Windows,
  Classes,
  Controls,
  Dialogs,
  expcfg in 'expcfg.pas' {Form1},
  FMXUtils in '..\FMXUtils.pas',
  Inifiles,
  pluginfunc,
  SysUtils;

var

  teh_dlg: pnewdialogue;
  tempstr, debugtrace: string;
  cfg: TInifile;
  export_npcprops: boolean;
  exec_prog: boolean;
  progname: string;

{$R *.res}

  function GetPluginName: ShortString; stdcall;
  begin
    Result := 'Dialogue -> Formatted TXT';
  end;

  function GetPluginDescription: ShortString; stdcall;
  begin
    Result :=
      'This plugin exports the dialogue as a simple text outline with NPC text, player options + target nodes';
  end;

  function GetInterfaceVersion: ShortString; stdcall;
  begin
    Result := Interface_Version;
  end;

  procedure PluginClose; stdcall;
  begin
  end;

  procedure PluginConfig(basepath: shortstring); stdcall;
  begin
    cfg := TInifile.Create(basepath + '\fmfdlg.ini');
    export_npcprops := cfg.readBool('Export_TXT.DLL Config',
      'Export NPC Properties', False);
    exec_prog := cfg.readBool('Export_TXT.DLL Config',
      'Execute External App', False);
    progname := cfg.readString('Export_TXT.DLL Config', 'External App Name', '');

    form1 := TForm1.Create(nil);
    form1.CheckBox1.Checked := exec_prog;
    if form1.checkbox1.Checked = True then
    begin
      Form1.JvFilenameEdit1.Enabled  := True;
      form1.JvFilenameEdit1.FileName := progname;
    end else
      Form1.JvFilenameEdit1.Enabled := False;
    form1.CheckBox2.Checked := export_npcprops;
    form1.showmodal;

    if form1.ModalResult = mrOk then
    begin
      cfg.WriteBool('Export_TXT.DLL Config', 'Export NPC Properties',
        Form1.CheckBox2.Checked);
      cfg.WriteBool('Export_TXT.DLL Config', 'Execute External App',
        Form1.CheckBox1.Checked);
      cfg.WriteString('Export_TXT.DLL Config', 'External App Name',
        Form1.JvFilenameEdit1.filename);
    end;

    form1.Free;
  end;

  function CanAddToMenu: boolean; stdcall;
  begin
    Result := True;
  end;

  procedure RunPlugin(basepath: shortstring); stdcall;
  var
    opendlg: TSaveDialog;
    s: TStrings;
    y, z: integer;
  begin
    try
      cfg := TInifile.Create(basepath + '\fmfdlg.ini');

      debugtrace := 'Reading config';
      export_npcprops := cfg.readBool('Export_TXT.DLL Config',
        'Export NPC Properties', False);
      exec_prog := cfg.readBool('Export_TXT.DLL Config',
        'Execute External App', False);
      progname := cfg.readString('Export_TXT.DLL Config',
        'External App Name', '');

      debugtrace := 'Allocate dialogue';
      new(teh_dlg);
      teh_dlg := GetDLGNew;
      senddebugmsg(PChar('Nodes: ' + IntToStr(teh_Dlg.nodecount)));
      opendlg := TSaveDialog.Create(nil);
      opendlg.InitialDir := basepath + '\dialogue';
      opendlg.Filter := 'Text files (*.txt)|*.txt;All files (*.*)|*.*';
      opendlg.defaultext := 'txt';
      opendlg.Options := [ofNoChangeDir];
      debugtrace := 'OpenDLG';

      if opendlg.Execute then
      begin
        debugtrace := 'Export Data';
        s := TStringList.Create;
        s.add('// Text file exported from FMF Dialogue tool');

        if export_npcprops = True then
        begin
          tempstr := teh_dlg.description;
          tempstr := StringReplace(tempstr, #13#10, '\n', [rfReplaceAll]);
          s.add(format('NPCPROPS "%s","%s","%s","%s","%s","%s"',
            [teh_dlg.npcname, teh_dlg.location, tempstr, teh_dlg.unknowndesc,
            teh_dlg.knowndesc, teh_dlg.detaileddesc]));
        end;

        for y := 0 to teh_dlg.nodecount - 1 do
        begin
          s.add(format('%s: %s', [teh_dlg.nodes[y].nodename, teh_dlg.nodes[y].npctext]));
          if teh_dlg.nodes[y].npctext_female <> '' then
            s.add(format('!FEMALE %s', [teh_dlg.nodes[y].npctext_female]));
          for z := 0 to teh_dlg.nodes[y].optioncnt - 1 do
          begin
            s.add(format('- %s (%s)', [teh_dlg.nodes[y].options[z].optiontext,
              teh_dlg.nodes[y].options[z].nodelink]));
          end;
          s.add('');
        end;
        s.SaveToFile(opendlg.filename);
        if (exec_prog = True) then
        begin
          debugtrace := 'Exec Prog';
          senddebugmsg(PChar('Attempting to execute ' + progname));

          ExecuteScriptLines(PChar('ExecuteFile(''' + progname +
            ''',''' + opendlg.filename + ''' , '''', SW_SHOW)'));
          // FMF_ExecuteFile(opendlg.filename,'' , '', SW_SHOW);
        end;

        debugtrace := 'DeInit';
        s.Free;
      end;
      cfg.Free;
      opendlg.Free;
    except
      on e: Exception do
      begin
        MessageDlg('ERROR!!!!!! DEBUGTRACE="' + debugtrace + '"', mtWarning, [mbOK], 0);
      end;
    end;

  end;

exports
  GetPluginName,
  SetApplicationHandle,
  PluginClose,
  PluginConfig,
  GetInterfaceVersion,
  GetPluginDescription,
  CanAddToMenu,
  RunPlugin;

begin

end.

