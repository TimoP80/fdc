library Utility_NodeTreeView;

{

FMF Dialogue tool plugin

Plugin Name: Node display test
Author: DjUnique

Description:

This is a test to see if the plugin refresh callback func works.

}



uses
   Forms, pluginfunc, SysUtils,
  testwnd in 'testwnd.pas' {Form1};


{$R *.res}

 // This function should return the name of the plugin to be
 // displayed in the menu of the host application
  function GetPluginName: ShortString; stdcall;
  begin;
    Result := 'Node Treeview';
  end;

  // This function should return a more detailed description of the plugin
  function GetPluginDescription: ShortString; stdcall;
  begin;
    Result := 'This plugin replicates the functionality of Temaperacl''s NodeViewer plugin.';
  end;


  function CanAddToMenu: boolean; stdcall;
  begin;
    Result := True;
  end;


  // This procedure is called when the plugin needs to update its display
  // due to changes made to the dialogue
  procedure PluginUpdate; stdcall;
  begin;
    senddebugmsg('Data UPDATE!');
    UpdateData;
  end;

  procedure PluginClose; stdcall;
  begin;

  end;

  // This function should return a key shortcut to be used in the menu
  // format is:
  // CTRL|ALT|SHIFT+<key> [A-Z]
  // examples: CTRL+B, ALT+A, CTRL+ALT+H

  function GetKeyShortCut: shortstring; stdcall;
  begin;
    Result := 'Ctrl+T';
  end;



  // This function is automatically set to return the interface version
  // that is defined in the pluginfunc unit.
  function GetInterfaceVersion: shortstring; stdcall;
  begin;
    Result := interface_version;
  end;

  // This is the main procedure for the plugin.

  // If you want the plugin to display a non-modal dialog
  // you should make a while..do loop
  // such as:

  // while Form1.visible do
  // begin;
  // application.processmessages
  // end;

  // This will allow the plugin to run in the background
  // and it will return from this procedure after the window is closed
  // either by a button or the exit callback function PluginClose

  // The basepath parameter contains the current path (the root
  // of the host application)

  procedure RunPlugin(basepath: shortstring); stdcall;
  begin;
    form1 := TForm1.Create(application);
    path  := basepath;
    form1.Show;
    ExecuteScriptLines('RequestPluginRefresh;');

    while (form1.visible) do
    begin;
      application.ProcessMessages;
    end;


    senddebugmsg('Afterplugindestroy.');
    
  end;

exports
  GetPluginName,
  PluginUpdate,
  GetPluginDescription,
  CanAddToMenu,
  RunPlugin,
  SetApplicationHandle,
  GetKeyShortCut,
  GetInterfaceVersion,
  PluginClose;

begin

end.

