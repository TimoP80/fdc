library Utility_ValidateDLG;

{

This is a plugin generated by the PluginHelper
application. It serves as a starting point for developing plugins
for FMF Dialogue Tool.

Plugin Name: Validate dialogue
Author: DjUnique

Description:

This plugin checks for invalid node links (e.g. non-existent nodes)
Good for checking if dialogue is ready to be exported.

}

uses
  VCL.Styles, VCL.Themes, Classes, VCL.Controls, VCL.Dialogs, pluginfunc, SysUtils, validatorwnd in 'validatorwnd.pas';
var the_dlg: pnewdialogue;

  function var_exists_in_dlg(varname: string): boolean;
  var i: integer;
  begin;
    Result := False;
    for i := 0 to the_dlg.varcnt - 1 do
    begin;
      if varname = the_dlg.variables[i].Name then
      begin;
        Result := True;
        exit;
      end;
    end;
  end;

  function GetLastNodeIndexFromDLG(compareindex: integer; Name: string; dlg: dialog): integer;
  var I:          integer;
  var occurences: integer;
  begin;
    Result := -1;

    for I := 0 to dlg.nodecount - 1 do
    begin;
      if (compareindex <> i) and (lowercase(Name) = lowercase(dlg.nodes[i].nodename)) then
      begin;
        senddebugmsg(PChar('Found: ' + Name));
        Result := i;
        Inc(occurences);
      end;

    end;
  end;



{$R *.res}
{$R VCLStyles.res}
  procedure PluginClose; stdcall;
  begin;

  end;

  function GetKeyShortCut: shortstring; stdcall;
  begin;
    Result := 'Ctrl+V';
  end;

  function GetInterfaceVersion: shortstring; stdcall;
  begin;
    Result := interface_version;
  end;


  procedure AddError(msg: string; node: integer);
  begin;
    form1.memo1.items.Add(msg);
    if node <> -1 then
    begin;
      senddebugmsg(PChar('Add error to point to node: ' + IntToStr(node) + ' (' + the_dlg.nodes[node].nodename + ')'));
    end;
    setlength(errors, errorlogsize + 1);
    errors[errorlogsize].errormsg  := msg;
    errors[errorlogsize].errornode := node;

    Inc(errorlogsize);
  end;

  function GetPluginName: ShortString; stdcall;
  begin;
    Result := 'Validate dialogue';
  end;
  function GetPluginDescription: ShortString; stdcall;
  begin;
    Result := 'This plugin is a tool for finding errors in your dialogues. ';
  end;
  function CanAddToMenu: boolean; stdcall;
  begin;
    Result := True;
  end;

  // TODO: Make the plugin non-modal

  procedure UpdateErrors;
  var j, u, t:     integer;
  var errorsfound: integer;
  var ind:         integer;
  begin;
    form1.memo1.Clear;
    errorlogsize := 0;
    errorsfound  := 0;
    if the_dlg.npcname = '' then
    begin;
      adderror('NPC Properties: The dialogue has no NPC name', -1);
      Inc(errorsfound);
    end;
    if the_dlg.description = '' then
    begin;
      adderror('NPC Properties: The dialogue has no description', -1);
      Inc(errorsfound);
    end;
    if the_dlg.location = '' then
    begin;
      adderror('NPC Properties: The dialogue has no location', -1);
      Inc(errorsfound);
    end;

    if the_dlg.unknowndesc = '' then
    begin;
      adderror('NPC Properties: The dialogue has no unknown description', -1);
      Inc(errorsfound);
    end;

    if the_dlg.knowndesc = '' then
    begin;
      adderror('NPC Properties: The dialogue has no known description', -1);
      Inc(errorsfound);
    end;

    if the_dlg.detaileddesc = '' then
    begin;
      adderror('NPC Properties: The dialogue has no detailed look description', -1);
      Inc(errorsfound);
    end;


    for j := 0 to the_dlg.nodecount - 1 do
    begin;
      ind := getlastnodeindexfromdlg(j, the_dlg.nodes[j].nodename, the_dlg^);
      if (ind <> -1) and (the_dlg.nodes[j].nodename <> '')then
      begin;
        adderror('There is a duplicate node ' + the_dlg.nodes[ind].nodename +
          ' with the same name as this one. NOTE: Node names are case insensitive.!', ind);

      end;


      if the_dlg.nodes[j].nodename = '' then
      begin
        AddError('Null node name found at position '+inttostr(j), j);
        Inc(errorsfound);
      end;

      if the_dlg.nodes[j].optioncnt = 0 then
      begin;
        AddError('Node ' + the_dlg.nodes[j].nodename + ' has no player options.', j);
        Inc(errorsfound);
      end;

      for t := 0 to the_dlg.nodes[j].optioncnt - 1 do
      begin;

        if the_dlg.nodes[j].options[t].conditioncnt > 0 then
        begin;
          for u := 0 to the_dlg.nodes[j].options[t].conditioncnt - 1 do
          begin;
            if (the_Dlg.nodes[j].options[t].conditions[u].link = LINK_NONE)
            and (u=0) and (the_dlg.nodes[j].options[t].conditioncnt > 1) then
            begin
            adderror('Conditions not linked at node '+the_Dlg.nodes[j].nodename+', player option '+inttostr(t)+' condition '+inttostr(u),j);
            end;


            if (the_Dlg.nodes[j].options[t].conditions[u].var_ptr <> '') then
            begin;
              if ((var_exists_in_dlg(the_Dlg.nodes[j].options[t].conditions[u].var_ptr) = False) and
                ((the_Dlg.nodes[j].options[t].conditions[u].check_type = 4) or
                (the_Dlg.nodes[j].options[t].conditions[u].check_type = 5) or
                (the_Dlg.nodes[j].options[t].conditions[u].check_type = 6))) then
              begin;
                adderror('Possible nonexistent variable [' + the_Dlg.nodes[j].options[t].conditions[u].var_ptr +
                  '] in condition #' + IntToStr(u) + ' of player option ' + IntToStr(t), j);
                Inc(errorsfound);
              end;
            end;

          end;

        end;


        if (the_dlg.nodes[j].options[t].genderflags > GENDER_FEMALE) then
        begin;
          adderror('Dialogue option #' + IntToStr(t + 1) + ' at node ' + the_dlg.nodes[j].nodename +
            ' has a weird genderflag value (' + IntToStr(the_dlg.nodes[j].options[t].genderflags) + ')', j);
        end;
        if (the_dlg.nodes[j].options[t].nodelink = the_dlg.nodes[j].nodename) then
        begin;
          AddError('Dialogue option #' + IntToStr(t + 1) + ' at node ' + the_dlg.nodes[j].nodename +
            ' causes an infinite loop by linking to this node.', j);
          Inc(errorsfound);
        end;


        if (the_dlg.nodes[j].options[t].nodelink = '') then
        begin;
          adderror('Dialogue option #' + IntToStr(t + 1) + ' at node ' + the_dlg.nodes[j].nodename +
            ' has a null link.', j);
          Inc(errorsfound);
        end else
        if (the_dlg.nodes[j].options[t].noderesolved = -1) and
          (the_dlg.nodes[j].options[t].nodelink <> 'done') and
          (the_dlg.nodes[j].options[t].nodelink <> 'combat') then
        begin;
          if (pos(' ', the_dlg.nodes[j].options[t].nodelink) <> 0) then
          begin;
            adderror('FATAL! Dialogue option #' + IntToStr(t + 1) + ' at node ' +
              the_dlg.nodes[j].nodename + ' contains whitespace in nodelink "' +
              the_dlg.nodes[j].options[t].nodelink + '"', j);
            Inc(errorsfound);
          end else
          begin;
            if (the_dlg.nodes[j].options[t].link_to_proc = False) and
              (the_dlg.nodes[j].options[t].link_to_skillcheck = False) then
            begin;
              adderror('Dialogue option #' + IntToStr(t + 1) + ' at node ' + the_dlg.nodes[j].nodename +
                ' refers to an undefined node "' + the_dlg.nodes[j].options[t].nodelink + '"', j);
              Inc(errorsfound);

            end;

          end;

        end;

      end;

    end;
    if errorsfound = 0 then
      adderror('No errors found in this dialogue.', -1);

  end;

  procedure RunPlugin(basepath: shortstring); stdcall;
  begin;
    new(the_dlg);
    the_dlg := GetDLGNew;
    //MessageDlg(format('Dialogue validation init.'+#13+#10+''+#13+#10+'Nodes: %d',[the_dlg.nodecount]), mtInformation, [mbOK], 0);
    form1   := TForm1.Create(NIL);
    //form1.Memo1.items.add('Checking for invalid player options...');
    updateerrors;
      tstylemanager.TrySetStyle(GetStyle);

    form1.showmodal;
    //currentdlg := the_dlg^;

    while form1.modalresult <> mrCancel do
    begin;
      if form1.modalresult = mrOk then
      begin;
        if errors[selected].errornode <> -1 then
        begin;
          senddebugmsg(PChar('Item selected on memo: ' + IntToStr(form1.memo1.ItemIndex)));
          senddebugmsg(PChar('Entering node ' + the_dlg.nodes[errors[selected].errornode].nodename));
          executescriptlines(PChar('EditNode(''' + the_dlg.nodes[errors[selected].errornode].nodename + ''')'));
        end else
        begin;
          MessageDlg('This item has no associated node info.', mtWarning, [mbOK], 0);
        end;
      end;
      updateerrors;
      form1.ShowModal;
    end;

   tstylemanager.TrySetStyle(tstylemanager.SystemStyle.Name);

  end;

exports
  GetPluginName,
  GetPluginDescription,
  CanAddToMenu,
  RunPlugin,
  PluginClose,
  SetApplicationHandle,
  GetInterfaceversion,
  GetKeyShortCut;

begin

end.

